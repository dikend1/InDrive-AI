#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

import torch
import numpy as np
from model import CarConditionAnalyzer

def test_clean_image():
    """–¢–µ—Å—Ç —á–∏—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = CarConditionAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä "—á–∏—Å—Ç–æ–≥–æ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—è—Ä–∫–æ–µ, —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
    clean_tensor = torch.rand(3, 224, 224) * 0.3 + 0.7  # —è—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    result = analyzer.analyze_car_condition(clean_tensor)
    print(f"   –±–∏—Ç—ã–π: {result['–±–∏—Ç—ã–π']}")
    print(f"   –≥—Ä—è–∑–Ω—ã–π: {result['–≥—Ä—è–∑–Ω—ã–π']}")  
    print(f"   —Ü–∞—Ä–∞–ø–∏–Ω—ã: {result['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è 0 –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if result['–±–∏—Ç—ã–π'] == 0 and result['–≥—Ä—è–∑–Ω—ã–π'] == 0 and result['—Ü–∞—Ä–∞–ø–∏–Ω—ã'] == 0:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞! –°–∏—Å—Ç–µ–º–∞ –Ω–µ–≤–µ—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    return result

def test_multiple_images():
    """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    analyzer = CarConditionAnalyzer()
    
    # –¢–µ—Å—Ç 1: –û—á–µ–Ω—å —è—Ä–∫–æ–µ —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    bright_tensor = torch.ones(3, 224, 224) * 0.9
    result1 = analyzer.analyze_car_condition(bright_tensor)
    print(f"–Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –±–∏—Ç—ã–π={result1['–±–∏—Ç—ã–π']}, –≥—Ä—è–∑–Ω—ã–π={result1['–≥—Ä—è–∑–Ω—ã–π']}, —Ü–∞—Ä–∞–ø–∏–Ω—ã={result1['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
    
    # –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    normal_tensor = torch.rand(3, 224, 224) * 0.5 + 0.25
    result2 = analyzer.analyze_car_condition(normal_tensor)
    print(f"–û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –±–∏—Ç—ã–π={result2['–±–∏—Ç—ã–π']}, –≥—Ä—è–∑–Ω—ã–π={result2['–≥—Ä—è–∑–Ω—ã–π']}, —Ü–∞—Ä–∞–ø–∏–Ω—ã={result2['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
    
    # –¢–µ—Å—Ç 3: –¢–µ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    dark_tensor = torch.rand(3, 224, 224) * 0.2
    result3 = analyzer.analyze_car_condition(dark_tensor)
    print(f"–¢–µ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –±–∏—Ç—ã–π={result3['–±–∏—Ç—ã–π']}, –≥—Ä—è–∑–Ω—ã–π={result3['–≥—Ä—è–∑–Ω—ã–π']}, —Ü–∞—Ä–∞–ø–∏–Ω—ã={result3['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
    
    # –ü–æ–¥—Å—á–µ—Ç —á–∏—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    clean_count = 0
    total_tests = 3
    
    for i, result in enumerate([result1, result2, result3], 1):
        if result['–±–∏—Ç—ã–π'] == 0 and result['–≥—Ä—è–∑–Ω—ã–π'] == 0 and result['—Ü–∞—Ä–∞–ø–∏–Ω—ã'] == 0:
            clean_count += 1
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {clean_count}/{total_tests} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ —á–∏—Å—Ç—ã–µ")
    
    if clean_count >= 2:  # –û–∂–∏–¥–∞–µ–º —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±—É–¥–µ—Ç —á–∏—Å—Ç—ã–º–∏
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–∏—Å—Ç—ã–µ")
    else:
        print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∞—è - –º–∞–ª–æ —á–∏—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

def main():
    print("üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    print("=" * 50)
    
    try:
        test_clean_image()
        test_multiple_images()
        
        print("\nüéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   ‚Ä¢ –£–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏–∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        print("   ‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–≤—Å–µ —Ö–æ—Ä–æ—à–æ' (0,0,0)")
        print("   ‚Ä¢ –¢–æ–ª—å–∫–æ 1-5% —Å–ª—É—á–∞–µ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        print("   ‚Ä¢ –ß–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –¥–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()