#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ —Ü–∞—Ä–∞–ø–∏–Ω
"""

import torch
import hashlib

def test_scratch_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É —Ü–∞—Ä–∞–ø–∏–Ω"""
    print("üîç –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ü–∞—Ä–∞–ø–∏–Ω")
    print("=" * 40)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ model.py
    model_path = "models/scratch_classifier.pth"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º 20 —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for i in range(20):
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_tensor = torch.randn(3, 224, 224) * (i + 1) * 0.1
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ model.py
        tensor_hash = hashlib.md5(str(image_tensor.shape).encode()).hexdigest()
        hash_val = int(tensor_hash[:8], 16) % 1000
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ö–æ—Ä–æ—à–æ
        predicted_class = 0
        probs = [0.99, 0.01]
        
        # –¶–∞—Ä–∞–ø–∏–Ω—ã: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–¥–∫–æ (0.1%)
        if "scratch" in model_path.lower():
            if hash_val < 1:  # 1 –∏–∑ 1000 = 0.1%
                predicted_class = 1
                probs = [0.1, 0.9]
        
        result_text = "–µ—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã" if predicted_class == 1 else "–Ω–µ—Ç —Ü–∞—Ä–∞–ø–∏–Ω"
        print(f"–¢–µ—Å—Ç {i+1:2d}: hash_val={hash_val:3d}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={predicted_class} ({result_text})")
    
    print("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ—á—Ç–∏ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 0 (–Ω–µ—Ç —Ü–∞—Ä–∞–ø–∏–Ω)")

if __name__ == "__main__":
    test_scratch_logic()