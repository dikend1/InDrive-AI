#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
"""

import requests
import json
from io import BytesIO
import numpy as np
from PIL import Image

def create_test_image():
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—á–∏—Å—Ç—ã–π –±–µ–ª—ã–π —Ñ–æ–Ω)"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 224x224
    img_array = np.full((224, 224, 3), 255, dtype=np.uint8)  # –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.fromarray(img_array)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO –∫–∞–∫ JPEG
    img_buffer = BytesIO()
    img.save(img_buffer, format='JPEG')
    img_buffer.seek(0)
    
    return img_buffer.getvalue()

def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —á–∏—Å—Ç—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("üß™ –¢–µ—Å—Ç API –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    print("=" * 40)
    
    # URL API (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000)
    url = "http://localhost:8000/analyze"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image_data = create_test_image()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    files = {'file': ('test_image.jpg', test_image_data, 'image/jpeg')}
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
        response = requests.post(url, files=files, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            –±–∏—Ç—ã–π = result.get('–±–∏—Ç—ã–π', -1)
            –≥—Ä—è–∑–Ω—ã–π = result.get('–≥—Ä—è–∑–Ω—ã–π', -1) 
            —Ü–∞—Ä–∞–ø–∏–Ω—ã = result.get('—Ü–∞—Ä–∞–ø–∏–Ω—ã', -1)
            
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            print(f"   –±–∏—Ç—ã–π: {–±–∏—Ç—ã–π} {'‚úÖ' if –±–∏—Ç—ã–π == 0 else '‚ùå'}")
            print(f"   –≥—Ä—è–∑–Ω—ã–π: {–≥—Ä—è–∑–Ω—ã–π} {'‚úÖ' if –≥—Ä—è–∑–Ω—ã–π == 0 else '‚ùå'}")
            print(f"   —Ü–∞—Ä–∞–ø–∏–Ω—ã: {—Ü–∞—Ä–∞–ø–∏–Ω—ã} {'‚úÖ' if —Ü–∞—Ä–∞–ø–∏–Ω—ã == 0 else '‚ùå'}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            all_clean = –±–∏—Ç—ã–π == 0 and –≥—Ä—è–∑–Ω—ã–π == 0 and —Ü–∞—Ä–∞–ø–∏–Ω—ã == 0
            
            if all_clean:
                print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ({–±–∏—Ç—ã–π},{–≥—Ä—è–∑–Ω—ã–π},{—Ü–∞—Ä–∞–ø–∏–Ω—ã})")
            else:
                print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê! –ß–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: ({–±–∏—Ç—ã–π},{–≥—Ä—è–∑–Ω—ã–π},{—Ü–∞—Ä–∞–ø–∏–Ω—ã})")
                print("   –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç: (0,0,0)")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_multiple_ports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö"""
    ports = [8000, 8001, 8002, 8003, 8004, 8005]
    
    for port in ports:
        url = f"http://localhost:{port}/analyze"
        
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            health_response = requests.get(f"http://localhost:{port}/health", timeout=2)
            if health_response.status_code == 200:
                print(f"üîç –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                test_image_data = create_test_image()
                files = {'file': ('test_image.jpg', test_image_data, 'image/jpeg')}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                response = requests.post(url, files=files, timeout=5)
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"üìä –ü–æ—Ä—Ç {port} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∞—Ä–∞–ø–∏–Ω—ã
                    —Ü–∞—Ä–∞–ø–∏–Ω—ã = result.get('—Ü–∞—Ä–∞–ø–∏–Ω—ã', -1)
                    if —Ü–∞—Ä–∞–ø–∏–Ω—ã == 0:
                        print(f"‚úÖ –ü–æ—Ä—Ç {port}: —Ü–∞—Ä–∞–ø–∏–Ω—ã = 0 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    else:
                        print(f"‚ùå –ü–æ—Ä—Ç {port}: —Ü–∞—Ä–∞–ø–∏–Ω—ã = {—Ü–∞—Ä–∞–ø–∏–Ω—ã} (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)")
                    
                break
                
        except:
            continue
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ API")

if __name__ == "__main__":
    print("üöó –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∏—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—é—Ç (0,0,0)")
    print()
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    test_multiple_ports()