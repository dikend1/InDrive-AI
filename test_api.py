#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Car Condition Analyzer API

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
"""

import requests
import json
import os
from pathlib import Path

# –ë–∞–∑–æ–≤—ã–π URL API
API_BASE_URL = "http://localhost:8001"

def test_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API...")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'‚úÖ' if data['image_processor'] else '‚ùå'}")
            print(f"   –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ' if data['condition_analyzer'] else '‚ùå'}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_analyze_image(image_path):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    print(f"\nüöó –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return None
    
    try:
        with open(image_path, 'rb') as f:
            files = {'file': f}
            response = requests.post(f"{API_BASE_URL}/analyze", files=files)
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ë–∏—Ç—ã–π: {data['–±–∏—Ç—ã–π']} ({'–î–∞' if data['–±–∏—Ç—ã–π'] else '–ù–µ—Ç'})")
            print(f"   –ì—Ä—è–∑–Ω—ã–π: {data['–≥—Ä—è–∑–Ω—ã–π']} ({'–î–∞' if data['–≥—Ä—è–∑–Ω—ã–π'] else '–ù–µ—Ç'})")
            print(f"   –¶–∞—Ä–∞–ø–∏–Ω—ã: {data['—Ü–∞—Ä–∞–ø–∏–Ω—ã']} ({'–î–∞' if data['—Ü–∞—Ä–∞–ø–∏–Ω—ã'] else '–ù–µ—Ç'})")
            
            if 'car_detected' in data:
                print(f"   –ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {'‚úÖ' if data['car_detected'] else '‚ùå'}")
            
            if 'overall_condition' in data:
                print(f"   –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {data['overall_condition']}")
            
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_detailed_analyze(image_path):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print(f"\nüîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {image_path}")
    
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return None
    
    try:
        with open(image_path, 'rb') as f:
            files = {'file': f}
            response = requests.post(f"{API_BASE_URL}/analyze-detailed", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"   –ë–∏—Ç—ã–π: {data['–±–∏—Ç—ã–π']}, –ì—Ä—è–∑–Ω—ã–π: {data['–≥—Ä—è–∑–Ω—ã–π']}, –¶–∞—Ä–∞–ø–∏–Ω—ã: {data['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if 'detailed_analysis' in data and data['detailed_analysis']:
                print("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                for category, info in data['detailed_analysis'].items():
                    print(f"   {category.capitalize()}:")
                    print(f"     –°—Ç–∞—Ç—É—Å: {info['status']}")
                    print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {info['confidence']:.1%}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            if 'car_detection' in data:
                car_det = data['car_detection']
                print(f"\nüöô –î–µ—Ç–µ–∫—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
                print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω: {'‚úÖ' if car_det['has_car'] else '‚ùå'}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {car_det.get('car_count', 0)}")
            
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def find_test_images():
    """–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö"""
    base_path = Path.cwd()
    test_images = []
    
    # –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–∞—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    for data_dir in ['data', 'data1', 'data2']:
        data_path = base_path / data_dir
        if data_path.exists():
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ test
            test_dir = data_path / 'test'
            if test_dir.exists():
                for img_file in test_dir.glob('*.jpg'):
                    test_images.append(str(img_file))
                    if len(test_images) >= 3:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        break
    
    return test_images

def test_models_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\nüß† –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
    try:
        response = requests.get(f"{API_BASE_URL}/models/status")
        if response.status_code == 200:
            data = response.json()
            
            for model_name, info in data.items():
                print(f"   {model_name.replace('_', ' ').title()}:")
                print(f"     –ó–∞–≥—Ä—É–∂–µ–Ω–∞: {'‚úÖ' if info['loaded'] else '‚ùå'}")
                print(f"     –ü—É—Ç—å: {info['model_path']}")
                print(f"     –ö–ª–∞—Å—Å—ã: {info['classes']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API"""
    print("üöó Car Condition Analyzer API - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
    if not test_health_check():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   python main.py")
        print("   –∏–ª–∏")
        print("   uvicorn main:app --host 0.0.0.0 --port 8001")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π
    test_models_status()
    
    # 3. –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = find_test_images()
    
    if not test_images:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∏ data/, data1/, data2/ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # 4. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for i, image_path in enumerate(test_images[:2], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\n{'='*20} –¢–µ—Å—Ç {i} {'='*20}")
        
        # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        result = test_analyze_image(image_path)
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if result and result.get('car_detected', False):
            test_detailed_analyze(image_path)
    
    print(f"\n{'='*60}")
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üåê –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {API_BASE_URL}/docs")
    print(f"üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {API_BASE_URL}/")

if __name__ == "__main__":
    main()