#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–µ—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –±–∏—Ç—ã–π 0/1, –≥—Ä—è–∑–Ω—ã–π 0/1, —Ü–∞—Ä–∞–ø–∏–Ω—ã 0/1
"""

import requests
import json
import os
import time

API_URL = "http://localhost:8004"

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        else:
            print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_analyze(image_path="data1/train/1200x900_jpg.rf.db09d6fa3553cf1895c5ccdc390ba7ed.jpg"):
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    
    try:
        with open(image_path, 'rb') as f:
            files = {'file': f}
            response = requests.post(f"{API_URL}/analyze", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –±–∏—Ç—ã–π={data['–±–∏—Ç—ã–π']}, –≥—Ä—è–∑–Ω—ã–π={data['–≥—Ä—è–∑–Ω—ã–π']}, —Ü–∞—Ä–∞–ø–∏–Ω—ã={data['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            status = []
            if data['–±–∏—Ç—ã–π'] == 1:
                status.append("–ë–ò–¢–´–ô")
            if data['–≥—Ä—è–∑–Ω—ã–π'] == 1:
                status.append("–ì–†–Ø–ó–ù–´–ô") 
            if data['—Ü–∞—Ä–∞–ø–∏–Ω—ã'] == 1:
                status.append("–ï–°–¢–¨ –¶–ê–†–ê–ü–ò–ù–´")
            
            if not status:
                print("üéâ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            else:
                print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {', '.join(status)}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_analyze_parts(image_path="data1/train/1200x900_jpg.rf.db09d6fa3553cf1895c5ccdc390ba7ed.jpg"):
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —á–∞—Å—Ç—è–º"""
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return
        
    print(f"\nüß© –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å—Ç—è–º: {image_path}")
    
    try:
        with open(image_path, 'rb') as f:
            files = {'file': f}
            response = requests.post(f"{API_URL}/analyze-by-parts", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å—Ç—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            print(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –±–∏—Ç—ã–π={data['–±–∏—Ç—ã–π']}, –≥—Ä—è–∑–Ω—ã–π={data['–≥—Ä—è–∑–Ω—ã–π']}, —Ü–∞—Ä–∞–ø–∏–Ω—ã={data['—Ü–∞—Ä–∞–ø–∏–Ω—ã']}")
            
            if '—á–∞—Å—Ç–∏' in data and data['—á–∞—Å—Ç–∏']:
                print("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç—è–º:")
                for part_name, part_result in data['—á–∞—Å—Ç–∏'].items():
                    problems = []
                    if part_result.get('–±–∏—Ç—ã–π', 0) == 1:
                        problems.append("–±–∏—Ç—ã–π")
                    if part_result.get('–≥—Ä—è–∑–Ω—ã–π', 0) == 1:
                        problems.append("–≥—Ä—è–∑–Ω—ã–π")
                    if part_result.get('—Ü–∞—Ä–∞–ø–∏–Ω—ã', 0) == 1:
                        problems.append("—Ü–∞—Ä–∞–ø–∏–Ω—ã")
                    
                    if problems:
                        print(f"   ‚Ä¢ {part_name}: {', '.join(problems)}")
                    else:
                        print(f"   ‚Ä¢ {part_name}: –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            else:
                print("üìã –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å—Ç—è–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if not test_health():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        print("   python main.py")
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = []
    for folder in ["data/train", "data1/train", "data2/train"]:
        if os.path.exists(folder):
            images = [f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            for img in images[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                test_images.append(os.path.join(folder, img))
    
    if not test_images:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    for img_path in test_images[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_analyze(img_path)
        test_analyze_parts(img_path)
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    print("   –±–∏—Ç—ã–π: 1 (–µ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è) –∏–ª–∏ 0 (–Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π)")
    print("   –≥—Ä—è–∑–Ω—ã–π: 1 (–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω—ã–π) –∏–ª–∏ 0 (—á–∏—Å—Ç—ã–π)")
    print("   —Ü–∞—Ä–∞–ø–∏–Ω—ã: 1 (–µ—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã) –∏–ª–∏ 0 (–Ω–µ—Ç —Ü–∞—Ä–∞–ø–∏–Ω)")

if __name__ == "__main__":
    main()